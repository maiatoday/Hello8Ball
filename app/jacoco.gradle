apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.2"
    // Custom reports directory can be specfied like this:
    // reportsDir = file("$buildDir/customJacocoReportDir")
}

project.afterEvaluate {

    android.applicationVariants.all { variant ->
        def variantName = variant.name
        def testTaskName = "test${variantName.capitalize()}UnitTest"
        tasks.create(name: "${testTaskName}Coverage", type: JacocoReport, dependsOn: "$testTaskName") {

            group = "Reporting"
            description = "Generate Jacoco coverage reports for the ${variantName.capitalize()} build."

            reports {
                html.enabled = true
                xml.enabled = true
            }

            def excludes = [
                    '**/AutoValue_*.*',
                    '**/*_Factory.*',
                    '**/R.class',
                    '**/BR.class',
                    '**/R$*.class',
                    '**/BuildConfig.*',
                    '**/Manifest*.*',
                    '**/*Test*.*',
                    'android/**/*.*',
                    '**/*Fragment**',
                    '**/*Activity**',
                    '**/*$ViewInjector*.*',
                    '**/*$ViewBinder*.*',
                    //'**/shared/error/*', // Exclude data classes error because the code is autogenerated
                    '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
                    '**/*Module.*', // Modules for Dagger.
                    '**/*Dagger*.*', // Dagger auto-generated code.
                    '**/*MembersInjector*.*', // Dagger auto-generated code.
                    '**/*_Provide*Factory*.*',
                    '**/*_Factory.*', //Dagger auto-generated code
                    '**/*$*$*.*' // Anonymous classes generated by kotlin
            ]
            def javaClasses = fileTree(dir: variant.getJavaCompileProvider().get().destinationDir, excludes: excludes)
            def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${variantName}", excludes: excludes)
            classDirectories.from = files([javaClasses, kotlinClasses])

            sourceDirectories.from = files([
                    "$project.projectDir/src/main/java",
                    "$project.projectDir/src/${variantName}/java",
                    "$project.projectDir/src/main/kotlin",
                    "$project.projectDir/src/${variantName}/kotlin"
            ])

            executionData.from = files("${project.buildDir}/jacoco/${testTaskName}.exec")
        }

        tasks.create(name: "${testTaskName}CoverageVerification", type: JacocoCoverageVerification, dependsOn: "${testTaskName}Coverage") {

            group = "Reporting"
            description = "Verify coverage limits for the ${variantName.capitalize()} build."


            def excludes = [
                    '**/AutoValue_*.*',
                    '**/*_Factory.*',
                    '**/R.class',
                    '**/BR.class',
                    '**/R$*.class',
                    '**/BuildConfig.*',
                    '**/Manifest*.*',
                    '**/*Test*.*',
                    'android/**/*.*',
                    '**/*Fragment**',
                    '**/*Activity**',
                    '**/*$ViewInjector*.*',
                    '**/*$ViewBinder*.*',
                    // '**/shared/error/*', // Exclude data classes because the code is autogenerated
                    '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
                    '**/*Module.*', // Modules for Dagger.
                    '**/*Dagger*.*', // Dagger auto-generated code.
                    '**/*MembersInjector*.*', // Dagger auto-generated code.
                    '**/*_Provide*Factory*.*',
                    '**/*_Factory.*', //Dagger auto-generated code
                    '**/*$*$*.*' // Anonymous classes generated by kotlin
            ]
            def javaClasses = fileTree(dir: variant.getJavaCompileProvider().get().destinationDir, excludes: excludes)
            def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${variantName}", excludes: excludes)
            classDirectories.from = files([javaClasses, kotlinClasses])

            sourceDirectories.from = files([
                    "$project.projectDir/src/main/java",
                    "$project.projectDir/src/${variantName}/java",
                    "$project.projectDir/src/main/kotlin",
                    "$project.projectDir/src/${variantName}/kotlin"
            ])

            executionData.from = files("${project.buildDir}/jacoco/${testTaskName}.exec")
            violationRules {
                setFailOnViolation(true)

                rule {
                    limit {
                        minimum = 0.50
                    }
                }

                rule {
                    element = 'CLASS'
                    includes = ['net.maiatoday.hello8ball.question.*']

                    limit {
                        counter = 'INSTRUCTION'
                        value = 'COVEREDRATIO'
                        minimum = 0.82
                    }
                }
                rule {
                    element = 'CLASS'
                    includes = ['net.maiatoday.hello8ball.view.MyViewModel']

                    limit {
                        counter = 'INSTRUCTION'
                        value = 'COVEREDRATIO'
                        minimum = 0.96
                    }
                }
                rule {
                    element = 'CLASS'
                    includes = ['net.maiatoday.hello8ball.util.*']

                    limit {
                        counter = 'INSTRUCTION'
                        value = 'COVEREDRATIO'
                        minimum = 0.98
                    }
                }

                rule {
                    element = 'PACKAGE'

                    limit {
                        value = 'COVEREDRATIO'
                        counter = 'INSTRUCTION'
                        minimum = 0.82
                    }
                }

            }
        }
    }
}

